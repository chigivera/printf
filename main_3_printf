.\"
.\"
.\"
.\"
.\"
.TH CUSTOM_PRINTF "August 05 2022" "0.1" "Library functions manual"

.SH NAME
.SH ""

.B CUSTOM_PRINTF
- custom version of the printf function.

.SH SYNOPSIS
.SH ""

#include "main.h"

int custom_printf(const char *[FORMAT], ...);

.SH DESCRIPTION
.SH ""

The printf function sends formatted output to stdout. A custom custom_printf() was developed for educational purposes by cohort #8 students Nicks and Mose Parsanka. The custom_printf() function's format string is a character string, beginning and ending in its initial shift state, if any. These arguments are placed using the percentage '%' operator.

.SS Compilation

.P
.RS
#include "main.h"

$ gcc -Wall -Werror -Wextra -pedantic -Wno-format *.c
$ gcc -Wall -Werror -Wextra -pedantic -g -Wno-format *.c (for gdb debugging)
.RE

.SS Printing
.RS

int custom_printf(const char *[FORMAT], ...);

FORMAT is the string that takes n specifier followed by a '%' symbol. i.e. "Hello this is %s from %d cohort". '...' is the variadic (any type of variable).

.SS Example

.RS

.B Input
.PP
custom_printf("Hello this is %s from %d cohort\\n\\", 33);
.PP
.B Output
.PP
Hello this is %s from %d cohort
.RE

.SS Return Value

Return value is a number of characters except NULL.

.SH FLAG SPECIFIERS
.SH ""

Custom and non-custom specifier modifiers.

.SH THE LENGTH MODIFIERS
.SH ""

Length modifiers.

.SH THE CONVERSION SPECIFIERS
.SH ""

.RS
Current arguments handled by conversion specifiers:

.IT
.B %
- The % symbol is set without argument, and the conversion specification has to be '%%'.

.IT
.B c
- Integer or char argument converted to unsigned char.

.IT
.B d, i
- Int argument is converted to signed decimal integer.

.IT
.B s
- String argument. custom_printf handles s conversion specifier if the argument value is not a pointer to a literal string.

.IT
.B o, u, x, X
- Unsigned int argument converted to unsigned octal (o), unsigned decimal (u), unsigned hexadecimal notation (x) for lower case and (X) for upper case.

.IT
.B b
- The unsigned int argument is converted to binary.

.IT
.B p
- The pointer is printed in hexadecimal format preceded by '0x'.

.IT
.B r, R
- 'r' prints the string in reverse. 'R' prints encrypted rot13.

.IT
.B S
- ASCII <32 & >127 has to appear in the argument string. Converted to hexadecimal preceded by \x.

.RE

